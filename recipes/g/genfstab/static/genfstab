#!/bin/sh
# genfstab for LFS - generates an /etc/fstab file with virtual and real mounts
# Inspired by Arch Linux's genfstab and modified for Linux From Scratch

out() { printf '%s\n' "$@" ;}
die() { out "$@" >&2; exit 1 ;}

find_tag() {
    [ "$ident" ] || { out "$1"; return 0 ;}
    [ -d "${tagdir:=/dev/disk/by-$(printf %s "$ident" | tr '[:upper:]' '[:lower:]')}" ] ||
        die "Directory '$tagdir' doesn't exist"
    for file in "$tagdir/"*; do
        [ "$(_readlinkf "$file")" = "$1" ] || continue
        tag="$ident=${file##*/}"
        break
    done
    out "${tag:-$1}"
}

print_mnt() {
    printf '%-18s %-15s %-8s %-22s %d %d\n' "$@"
}

_readlinkf() {
    [ "${1:-}" ] || return 1
    max_symlinks=40
    CDPATH=''
    target=$1
    [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"}
    [ -d "${target:-/}" ] && target="$target/"
    cd -P . 2>/dev/null || return 1
    while [ "$max_symlinks" -ge 0 ]; do
        max_symlinks=$((max_symlinks - 1))
        if [ ! "$target" = "${target%/*}" ]; then
            case $target in
                /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
                *) cd -P "./${target%/*}" 2>/dev/null || break ;;
            esac
            target=${target##*/}
        fi
        if [ ! -L "$target" ]; then
            target="${PWD%/}${target:+/}${target}"
            printf '%s\n' "${target:-/}"
            return 0
        fi
        link=$(ls -dl -- "$target" 2>/dev/null) || break
        target=${link#*" $target -> "}
    done
    return 1
}

ispseudo() {
    case "$fs" in /dev/loop*) return 0 ;; /*|*=*) ;; *) return 0; esac
    case "$type" in squashfs|proc|sysfs|tmpfs|devtmpfs|devpts|debugfs|cgroup2) return 0; esac
    while read -r ps filesystem; do
        [ "$filesystem" = "$type" ] || continue
        [ "$ps" ] && return 0
        return 1
    done < /proc/filesystems
    return 1
}

usage() {
    out "usage: ${0##*/} [-f path] [-t TAG] [-LpPU] [root]" "" \
        "  -L, -U         Use LABEL or UUID for devices (shorthand for -t)" \
        "  -t <TAG>       Use device tag (LABEL, UUID, PARTLABEL, PARTUUID)" \
        "  -p / -P        Exclude/include pseudo filesystems (default: exclude)" \
        "  -f <filter>    Only show entries under this path" \
        "  -h             Show this help"
    exit "${1:-0}"
}

# Parse arguments
ident='' filter='' pseudo=0
while getopts hPpLUf:t: flag; do
    case $flag in
        h) usage ;;
        P) pseudo=1 ;;
        p) pseudo=0 ;;
        L) ident=LABEL ;;
        U) ident=UUID ;;
        f) [ -d "$OPTARG" ] || die "Not a directory '$OPTARG'"
           filter=$(_readlinkf "$OPTARG") ;;
        t) case "$OPTARG" in
               LABEL|UUID|PARTLABEL|PARTUUID) ident=$OPTARG ;;
               *) die "Unknown identifier '$OPTARG'";;
           esac ;;
        ?) usage 1 ;;
    esac
done
shift $((OPTIND - 1))

[ "$1" ] && {
    [ -d "$1" ] || die "Not a directory '$1'"
    root="$(_readlinkf "$1")"
}

# Header
cat <<EOF
# Begin /etc/fstab

# file system       mount-point     type     options                dump  fsck
#                                                                  order
EOF

# /proc/mounts
while read -r fs dir type options _; do
    if ispseudo; then
        pass=0
        [ "$pseudo" != 1 ] && continue
        [ "$ident" ] && out "# $fs"
    else
        case "$dir" in "${root:-/}"*) ;; *) continue; esac
        [ "$ident" ] && out "# $fs"
        fs="$(find_tag "$fs")"
        [ "$root" ] && dir=/${dir#$root}
        case "$dir" in /) pass=1 ;; *) pass=2 ;; esac
    fi
    [ "$filter" ] && case "$dir" in ${filter%/}*) ;; *) continue; esac
    print_mnt "$fs" "${dir:-/}" "$type" "$options" 0 "$pass"
done < /proc/mounts

# Swaps
while read -r file _; do
    [ -f "/$file" ] || continue
    [ "$root" ] && {
        case "$file" in "$root/"*) ;; *) continue; esac
        file=/${file#$root}
    }
    print_mnt "$file" none swap "pri=1" 0 0
done < /proc/swaps

# Add essential pseudo-filesystems explicitly if missing
add_if_missing() {
    grep -q -E "[[:space:]]$2[[:space:]]" /proc/mounts || print_mnt "$1" "$2" "$3" "$4" 0 0
}

add_if_missing proc           /proc           proc     "nosuid,noexec,nodev"
add_if_missing sysfs          /sys            sysfs    "nosuid,noexec,nodev"
add_if_missing devpts         /dev/pts        devpts   "gid=5,mode=620"
add_if_missing tmpfs          /run            tmpfs    "defaults"
add_if_missing devtmpfs       /dev            devtmpfs "mode=0755,nosuid"
add_if_missing tmpfs          /dev/shm        tmpfs    "nosuid,nodev"
add_if_missing cgroup2        /sys/fs/cgroup  cgroup2  "nosuid,noexec,nodev"

# Footer
echo "# End /etc/fstab"
