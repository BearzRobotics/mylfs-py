# This is a general config file for options to simpliy command line args.
# don't leave trailing spaces
# tabs do not work. -- spaces only

# all paths are realtive paths to the where the script is executed! logs/ not 
# /code/data/py/mylfs-py/logs  <- Absolute paths not support

# LFS values
# lft_tgt should be $(uname -m)-lfs-linux-gnu
lfs_tgt: x86_64-lfs-linux-gnu

# used for install
lfs_fs: ext4
lfs_rootlabel: LFSROOT
lfs_efilabel: LFSEFI

# the arch that should be targeted
target_arch: x86_64

# set the root passward
root_password: password

# should test be ran?
run_test: false

# make flags
make_flags: -j8

# whether to keep extracted source after a succeful build
cleanup_sources: true

# Disable colored output from this program.
# cannot guarentee that any other program that might print will
# have color disabled
disable_colors: false

# keep log files
keep_logs: true

# Used to enable UEFI support
uefi: false

# build path is a relative path to the execution of the program
build_path: "mnt/lfs/"

# path to recipes dir
recipes_path: "recipes/"

# only build the base system phase 1-4
bootstrap_only: false




# These options are passed into fdisk to create a basic BIOS layout
# blank lines will cause fdisk to use the default option
fdisk: |
  o       # create DOS partition table
  n       # new partition
          # default partition type (primary)
          # default partition number (1)
          # default partition start
          # default partition end (max)
  y       # confirm overwrite (noop if not prompted)
  w       # write to device and quit


#if uefi: true
fdisk_uefi: |
 g       # create GPT partition table
 n       # new partition (BIOS boot)
 1       # partition number
        # default start
 +2M     # 2MB for BIOS boot
 t       # change type
 #1       # partition 1
 4       # type 4 = BIOS boot (EF02)
 n       # new partition (EFI system)
 2
         # default start
 +500M
 t
 2
 1       # type 1 = EFI System (EF00)
 n       # new partition (swap)
 3
         # default start
 +4G
 t
 3
 19      # type 19 = Linux swap
 n       # new partition (LFS root)
 4
         # default start
         # default end (use rest of disk)
 w       # write table and exit

version_check: |
  #!/bin/bash
  # This script came from LFS 12.3
  # A script to list version numbers of critical development tools
  # If you have tools installed in other directories, adjust PATH here AND
  # in ~lfs/.bashrc (section 4.4) as well.
  LC_ALL=C
  PATH=/usr/bin:/usr/sbin:/bin:/sbin

  bail() { echo "FATAL: $1"; exit 1; }
  grep --version > /dev/null 2> /dev/null || bail "grep does not work"
  sed '' /dev/null || bail "sed does not work"
  sort   /dev/null || bail "sort does not work"

  ver_check()
  {
    if ! type -p $2 &>/dev/null
    then
      echo "ERROR: Cannot find $2 ($1)"; return 1;
    fi
    v=$($2 --version 2>&1 | grep -E -o '[0-9]+\.[0-9\.]+[a-z]*' | head -n1)
    if printf '%s\n' $3 $v | sort --version-sort --check &>/dev/null
    then
      printf "OK:    %-9s %-6s >= $3\n" "$1" "$v"; return 0;
    else
      printf "ERROR: %-9s is TOO OLD ($3 or later required)\n" "$1"; 
      return 1;
    fi
  }

  ver_kernel()
  {
    kver=$(uname -r | grep -E -o '^[0-9\.]+')
    if printf '%s\n' $1 $kver | sort --version-sort --check &>/dev/null
    then
      printf "OK:    Linux Kernel $kver >= $1\n"; return 0;
    else
      printf "ERROR: Linux Kernel ($kver) is TOO OLD ($1 or later required)\n" "$kver"; 
      return 1;
    fi
  }

  # Coreutils first because --version-sort needs Coreutils >= 7.0
  ver_check Coreutils      sort     8.1 || bail "Coreutils too old, stop"
  ver_check Bash           bash     3.2
  ver_check Binutils       ld       2.13.1
  ver_check Bison          bison    2.7
  ver_check Diffutils      diff     2.8.1
  ver_check Findutils      find     4.2.31
  ver_check Gawk           gawk     4.0.1
  ver_check GCC            gcc      5.2
  ver_check "GCC (C++)"    g++      5.2
  ver_check Grep           grep     2.5.1a
  ver_check Gzip           gzip     1.3.12
  ver_check M4             m4       1.4.10
  ver_check Make           make     4.0
  ver_check Patch          patch    2.5.4
  ver_check Perl           perl     5.8.8
  ver_check Python         python3  3.4
  ver_check Sed            sed      4.1.5
  ver_check Tar            tar      1.22
  ver_check Texinfo        texi2any 5.0
  ver_check Xz             xz       5.0.0
  ver_check fdisk          fdisk    2.40.2
  ver_check rsync          rsync    3.4.0
  ver_kernel 5.4

  if mount | grep -q 'devpts on /dev/pts' && [ -e /dev/ptmx ]
  then echo "OK:    Linux Kernel supports UNIX 98 PTY";
  else echo "ERROR: Linux Kernel does NOT support UNIX 98 PTY"; fi

  alias_check() {
    if $1 --version 2>&1 | grep -qi $2
    then printf "OK:    %-4s is $2\n" "$1";
    else printf "ERROR: %-4s is NOT $2\n" "$1"; fi
  }
  echo "Aliases:"
  alias_check awk GNU
  alias_check yacc Bison
  alias_check sh Bash

  echo "Compiler check:"
  if printf "int main(){}" | g++ -x c++ -
  then echo "OK:    g++ works";
  else echo "ERROR: g++ does NOT work"; fi
  rm -f a.out

  if [ "$(nproc)" = "" ]; then
    echo "ERROR: nproc is not available or it produces empty output"
  else
    echo "OK: nproc reports $(nproc) logical cores are available"
  fi